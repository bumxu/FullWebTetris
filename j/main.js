// Generated by LiveScript 1.3.0
(function(){
  var ui, game, storage, activity, activityAmount, preload, changeActivity, setEvents, adjust, newGame;
  this.fwt = {};
  ui = {};
  game = storage = activity = void 8;
  activityAmount = $('section').length;
  preload = function(){
    var lcanvas, lctx, radp, loopo;
    storage = new Storage();
    window.onresize = adjust;
    adjust();
    lcanvas = $('#loader canvas').attr({
      'width': $(window).width(),
      'height': $(window).height()
    }).get(0);
    lctx = lcanvas.getContext('2d');
    radp = 0;
    lctx.fillStyle = "#234750";
    lctx.rect(0, 0, lcanvas.width, lcanvas.height);
    lctx.fill();
    loopo = function(){
      radp += 2;
      lcanvas.width = lcanvas.width;
      lctx.globalCompositeOperation = "source-over";
      lctx.fillStyle = "#234750";
      lctx.rect(0, 0, lcanvas.width, lcanvas.height);
      lctx.fill();
      lctx.globalCompositeOperation = "xor";
      lctx.beginPath();
      lctx.arc(lcanvas.width * 70 / 100, lcanvas.height * 30 / 100, lcanvas.width * radp / 100, 0, Math.PI * 2, true);
      lctx.fill();
      if (radp < 100) {
        return requestAnimationFrame(loopo);
      } else {
        return $('#loader').hide();
      }
    };
    loopo();
    return setEvents();
  };
  changeActivity = function(act){
    var active, other, activeIndex, otherIndex;
    active = $('section.active');
    other = $('section#' + act);
    activeIndex = $('section').index(active);
    otherIndex = $('section').index(other);
    if (activeIndex === otherIndex || otherIndex >= activityAmount || otherIndex < 0) {
      return false;
    }
    active.removeClass('active');
    other.addClass('active');
    if (activeIndex < otherIndex) {
      active.animate({
        'left': '-100%'
      }, 400);
      other.css({
        'left': '100%'
      });
      other.animate({
        'left': '0'
      }, 400);
    } else {
      active.animate({
        'left': '100%'
      }, 400);
      other.css({
        'left': '-100%'
      });
      other.animate({
        'left': '0'
      }, 400);
    }
    activity = act;
    return true;
  };
  setEvents = function(){
    document.onkeyup = function(e){
      if (e.keyCode === 40 || e.keyCode === 98) {
        if (activity === 'game') {
          game.normalSpeed();
        }
      }
      if (e.keyCode === 88) {
        if (activity === 'game') {
          game.rotateC();
        }
      }
      if (e.keyCode === 90) {
        if (activity === 'game') {
          game.rotateCC();
        }
      }
      if (e.keyCode === 38 || e.keyCode === 104) {
        if (activity === 'game') {
          game.rotate();
        }
      }
      if (e.keyCode === 78 || e.keyCode === 105) {
        if (activity === 'game') {
          return newGame();
        }
      }
    };
    document.onkeydown = function(e){
      if (e.keyCode === 39 || e.keyCode === 102) {
        if (activity === 'game') {
          game.right();
        }
      }
      if (e.keyCode === 37 || e.keyCode === 100) {
        if (activity === 'game') {
          game.left();
        }
      }
      if (e.keyCode === 32 || e.keyCode === 96) {
        if (activity === 'game') {
          game.drop();
        }
      }
      if (e.keyCode === 80 || e.keyCode === 103) {
        if (activity === 'game') {
          game.pauseGame();
        }
      }
      if (e.keyCode === 40 || e.keyCode === 98) {
        if (activity === 'game') {
          return game.fastSpeed();
        }
      }
    };
  };
  adjust = function(){
    var optimal, gutter, screen, availableVE, optimalVE, availableHO, optimalHO, asideWidth, totalWidth, asideHeight, totalHeight;
    optimal = function(availableWidth, availableHeight){
      var boardWidth, boardHeight;
      boardWidth = availableWidth;
      boardHeight = boardWidth * storage.get('game-height') / storage.get('game-width');
      if (boardHeight > availableHeight) {
        boardHeight = availableHeight;
        boardWidth = boardHeight * storage.get('game-width') / storage.get('game-height');
      }
      return {
        w: boardWidth,
        h: boardHeight
      };
    };
    gutter = Math.min($('#game').width(), $('#game').height()) / 100 * 0.5;
    $('#game > div').css({
      'top': gutter,
      'left': gutter,
      'right': gutter,
      'bottom': gutter
    });
    screen = {
      w: $('#game > div').width(),
      h: $('#game > div').height()
    };
    availableVE = {
      w: screen.w / 100 * (100 - 12) - gutter,
      h: screen.h
    };
    optimalVE = optimal(availableVE.w, availableVE.h);
    availableHO = {
      w: screen.w,
      h: screen.h / 100 * (100 - 12) - gutter
    };
    optimalHO = optimal(availableHO.w, availableHO.h);
    if (optimalVE.w > optimalHO.w) {
      $('#game aside').attr('class', 'vertical');
      asideWidth = $('#game aside').width();
      totalWidth = asideWidth + optimalVE.w + gutter;
      $('#game aside').css({
        height: optimalVE.h,
        width: '12%',
        left: (screen.w - totalWidth) / 2
      });
      $('#game #board').css({
        height: optimalVE.h,
        width: optimalVE.w,
        top: 0,
        left: (screen.w - totalWidth) / 2 + asideWidth + gutter
      });
    } else {
      $('#game aside').attr('class', 'horizontal');
      asideHeight = optimalHO.w / 5.9;
      totalHeight = asideHeight + optimalHO.h + gutter;
      $('#game aside').css({
        width: optimalHO.w,
        'top': (screen.h - totalHeight) / 2
      });
      $('#game #board').css({
        height: optimalHO.h,
        width: optimalHO.w,
        left: 0,
        top: (screen.h - totalHeight) / 2 + asideHeight + gutter
      });
    }
    return $('#game canvas').attr({
      width: $('#game #board').width(),
      height: $('#game #board').height()
    });
  };
  newGame = function(){
    changeActivity('game');
    if (typeof game !== 'undefined') {
      game.endGame();
    }
    return game = new Game({});
  };
  fwt.changeActivity = changeActivity;
  fwt.newGame = newGame;
  fwt.game = function(){
    return game;
  };
  $(function(){
    preload();
  });
}).call(this);
